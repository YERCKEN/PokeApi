@page "/"
@rendermode InteractiveAuto

@using PokeApi.Shared.Models
@using Services;
@using MudBlazor

@* Mostramos el componente (Pokemon)  ------------------------------------------------------*@
<MudItem xs="12" sm="12" lg="5" md="5" Class="border rounded d-flex justify-content-center">
    <Pokemon Name="@_selectedPokemonName"/>
</MudItem>

<MudItem xs="12" sm="12" lg="1" md="1" Class="">
</MudItem>

@* LISTADO DE POKEMONES------------------------------------------------------*@
<MudItem xs="12" sm="12" md="6" Class="border rounded" >
    
    <MudItem Class="py-10 px-10 " Outlined="true"
              Style="max-height: 80vh; overflow-y: auto; height: 80vh; padding: 0;">

        @*Si el listado es nulo, mostramos un skeleton mientras carga los datos*@
        @if (_pokemons == null)
        {
            <!-- Generamos 10 skeletons para simular la lista de los pokemones -->
            <MudGrid Justify="Justify.Center" Style="gap: 5px;">
                @for (int i = 0; i < 10; i++)
                {
                    <MudItem xs="5" Class="p-0">
                        <MudCardHeader Class="pl-10">
                            <CardHeaderAvatar>
                                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="50px"
                                             Width="50px"/>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudSkeleton Animation="Animation.Wave" Width="70%"/>
                            </CardHeaderContent>
                        </MudCardHeader>
                    </MudItem>
                }
            </MudGrid>
        }

        @* Si no se encuentran pokemones mostramos el aviso *@
        else if (_pokemons.Count == 0)
        {
            <MudAlert Severity="Severity.Error">No se encontraron datos.</MudAlert>
        }
        else
        {
            <MudGrid Justify="Justify.Center" Class="">

                <!-- Input para realizar la búsqueda-->
                <MudItem xs="12" md="12" lg="12"  Class=" p-0">
                    <MudTextField @bind-Value="_searchTerm" Placeholder="Buscar por nombre..." Immediate="true" Variant="Variant.Outlined" FullWidth="true" Class="mb-4"/>
                </MudItem>

                @* Verificamos si hay pokemones *@
                @if (FilteredPokemons.Count == 0)
                {
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Info">El Pokemon no Existe.</MudAlert>
                    </MudItem>
                }
                else
                {
                    @foreach (var pokemon in FilteredPokemons)
                    {
                        <MudItem xs="12" md="12" lg="6" xl="4"  Class="p-0" >
                            <MudButton FullWidth="true"
                                       @onclick="() => SelectPokemon(pokemon.Name)"
                                       Class="border h-full d-flex align-center justify-center mud-width-full"
                                       Color="@(_selectedPokemonName == pokemon.Name ? Color.Primary : Color.Default)"
                                       Variant="@(_selectedPokemonName == pokemon.Name ? Variant.Filled : Variant.Outlined)">
                                <MudImage Src="@pokemon.Sprite" Style="width: 40% "/>
                                @pokemon.Name.ToUpper()
                            </MudButton>
                        </MudItem>
                    }
                }
            </MudGrid>
        }
    </MudItem>
    
</MudItem>

@code {
    private PokeApiClientService _clientService;
    private List<PokemonListInfo>? _pokemons;
    private string _selectedPokemonName = string.Empty;
    private string _searchTerm = string.Empty; // Variable para el término de búsqueda

    // Propiedad calculada para filtrar Pokémon
    private List<PokemonListInfo> FilteredPokemons => _pokemons?
        .Where(p => string.IsNullOrEmpty(_searchTerm) ||
                    p.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))
        .ToList() ?? new List<PokemonListInfo>();

    private void SelectPokemon(string name)
    {
        if (!string.IsNullOrEmpty(name))
        {
            _selectedPokemonName = name;
            _searchTerm = "";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _clientService = new PokeApiClientService("https://localhost:7285/");
        _pokemons = await _clientService.GetPokemonListAsync();

        if (_pokemons != null)
        {
            for (int i = 0; i < _pokemons.Count; i++)
            {
                _pokemons[i].Sprite = $"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/{i + 1}.png";
            }

            _selectedPokemonName = _pokemons.First().Name;
        }
    }

}