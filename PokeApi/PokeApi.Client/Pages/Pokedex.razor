@page "/"
@rendermode InteractiveAuto

@* Importamos modelos desde el proyecto compartido  . . .. .*@
@using PokeApi.Shared.Models

@* Usamos los servicios del clien *@
@using Services;

@* Importamos MudBlazor *@
@using MudBlazor
@using MudBlazor.Components

@* Agregamos componente con las carácteristicas del pokemon y le enviamos el parametro*@

<MudItem xs="12" sm="12" md="6">

    <MudPaper Class="px-10" Outlined="true" Style="max-height: 80vh; overflow-y: auto; height: 80vh;">

        <Pokemon Name="@_selectedPokemonName" />

    </MudPaper>

</MudItem>


@* Lista de Pokemones ------------------------------------------------------------- *@

<MudItem xs="12" sm="12" md="6">

    <MudPaper Class="custom-outlined px-10 py-10" Outlined="true" Style="max-height: 80vh; overflow-y: auto; height: 80vh;">

        @* Mosytramos el skeleton*@
        @if (_pokemons == null)
        {
            @* for para generar los skeletons de cadad pokemon *@
            <div class="list-group d-grid listPokeBtns">
                @for (int i = 0; i < 10; i++)
                {
                    <MudCard>

                        <MudCardHeader>

                            <CardHeaderAvatar>
                                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="60px" Width="60px" />
                            </CardHeaderAvatar>

                            <CardHeaderContent>
                                <MudSkeleton Animation="Animation.Wave" Width="40%" />
                                <MudSkeleton Animation="Animation.Wave" Width="60%" />
                            </CardHeaderContent>

                        </MudCardHeader>


                    </MudCard>
                }
            </div>
        }
        else if (_pokemons.Count == 0)
        {
            <MudAlert Severity="Severity.Error">No se encontraron datos.</MudAlert>

        }
        else // Si hay datos, se muestra la lista de pokemones
        {

            <MudGrid Justify="Justify.Center"   Style="gap: 5px;">


                @foreach (var pokemon in _pokemons)
                {

                   
                    @* <button class=" h-full cursor-pointer  @(_selectedPokemonName == pokemon.Name ? "PokeBnSelected" : "border")" id="pokeListBtn"
                    @onclick="() => SelectPokemon(pokemon.Name)" style="width: 100%; justify-content: start;">

                        <img src="@pokemon.Sprite" />
                        @pokemon.Name.ToUpper()

                    </button> *@

                    
                    <MudItem xs="5" Class="p-0" >

                        <MudButton FullWidth="true" @onclick="() => SelectPokemon(pokemon.Name)" Class="border h-full">
                            <img src="@pokemon.Sprite" />
                            @pokemon.Name.ToUpper()
                        </MudButton>

                    </MudItem>

                }
            </MudGrid>
        }
    </MudPaper>

</MudItem>



@code {

    // Declaramos una variable para el servicio
    private PokeApiClientService _clientService;
    private List<PokemonListInfo>? _pokemons;

    public string img;

    // Nombre del Pokémon seleccionado inciialmente vacío
    private string _selectedPokemonName = string.Empty;


    // Método para seleccionar un Pokémon
    private void SelectPokemon(string name)
    {
        if (!string.IsNullOrEmpty(name))
        {
            _selectedPokemonName = name;
        }
    }


    // Método para obtener la lista de pokemones AL INICIAR la página
    protected override async Task OnInitializedAsync()
    {

        // Instanciamos el servicio con nuestra direccion
        _clientService = new PokeApiClientService("https://localhost:7285/");

        // Obtener la lista de pokémones desde el servicio
        _pokemons = await _clientService.GetPokemonListAsync();


        int x = 1;

        foreach (var pokemon in _pokemons)
        {
          

            pokemon.Sprite = $"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/{x}.png";
            x++;
            Console.WriteLine(pokemon.Name);
            Console.WriteLine(pokemon.Sprite);
        }


        // Selecciona el primer Pokémon por defecto si existe
        if (_pokemons?.Count > 0)
        {
            _selectedPokemonName = _pokemons.First().Name;
        }


    }
}
