
@page "/"
@rendermode InteractiveAuto

@* Importamos modelos desde el proyecto compartido  . . .. .*@
@using PokeApi.Shared.Models

@* Usamos los servicios del clien *@
@using Services;

@* Importamos MudBlazor *@
@using MudBlazor
@using MudBlazor.Components


<MudButton Variant="Variant.Filled" Color="Color.Secondary">Secondary</MudButton>


@* Agregamos componente con las carácteristicas del pokemon y le enviamos el parametro*@
<div class="col-sm PokeList">

    <Pokemon Name="@_selectedPokemonName" />

</div>

@* Lista de Pokemones ------------------------------------------------------------- *@

<div class="col-sm  PokeList">


    @if (_pokemons == null)
    {
        <p>Cargando datos...</p>
    }
    else if (_pokemons.Count == 0)
    {
        <p>No se encontraron datos.</p>
    }
    else // Si hay datos, se muestra la lista de pokemones
    {
        @* Iniciamos el contador en 1 *@
        int i = 1;

        // Input para buscar un Pokémon


        <div class=" list-group d-grid listPokeBtns">

            @foreach (var pokemon in _pokemons)
            {

                <button class="cursor-pointer list-group-item  @(_selectedPokemonName == pokemon.Name ? "PokeBnSelected" : "")" id="pokeListBtn"
                @onclick="() => SelectPokemon(pokemon.Name)">

                    <img src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/@(i).png" alt="Alternate Text" />
                    @pokemon.Name

                </button>

                @* Incrementamos el contador *@
                i++;

            }
        </div>
    }

</div>

@code {

    // Declaramos una variable para el servicio
    private PokeApiClientService _clientService;
    private List<PokemonListInfo>? _pokemons;

    // Nombre del Pokémon seleccionado inciialmente vacío
    private string _selectedPokemonName = string.Empty;

    // Método para seleccionar un Pokémon
    private void SelectPokemon(string name)
    {
        if (!string.IsNullOrEmpty(name))
        {
            _selectedPokemonName = name;
        }
    }


    // Método para obtener la lista de pokemones AL INICIAR la página
    protected override async Task OnInitializedAsync()
    {

         // Instanciamos el servicio con nuestra direccion 
        _clientService = new PokeApiClientService("https://localhost:7285/");

        // Obtener la lista de pokémones desde el servicio
        _pokemons = await _clientService.GetPokemonListAsync();

        // Selecciona el primer Pokémon por defecto si existe
        if (_pokemons?.Count > 0)
        {
            _selectedPokemonName = _pokemons.First().Name;
        }


    }
}
