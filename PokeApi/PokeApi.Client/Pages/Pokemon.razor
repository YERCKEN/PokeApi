
@rendermode InteractiveAuto

@* Importamos los modelos y servicios compartidos y inyectamos la interfaz*@
@using PokeApi.Shared.Models
@using PokeApi.Shared.Services
@inject IPokeApiServiceShared PokeApiService


@* Verificamos si se encontró algún pokemón*@

@if (pokemon == null)
{
    <p>Selecciona un Pokémon</p>
}
// Si se encontró un pokemón, se muestra la información
else
{

    <div class="pokemon-card">

        @* Se muestra la imagen del pokemón si existe *@
        <div class="row">

            <div class="col-12 text-center p-3">

        
                @if (!string.IsNullOrEmpty(ImgPokemon))
                {
                    <img class="w-50" src="@ImgPokemon" alt="@pokemon.Name" />
                }

            </div>
        </div>

        @* Se muestra el nombre del pokemón si existe *@
        <div class="row">
            <div class="col-12 text-center pokeName">
                @if (!string.IsNullOrEmpty(pokemon.Name))
                {
                    <h2>@pokemon.Name.ToUpper()</h2>
                }
            </div>
        </div>

        @* Labe Tipo ----------------------------------------------------------------------------------- *@
        <div class="row mt-4">
            <div class="col-12 text-start  ">
                <p class="fw-light fst-italic text-secondary">Tipos</p>
            </div>
        </div>

        <div class="row mt-2 justify-content-center ">

            @foreach (var type in pokemon.Types)
            {
                <div class="col-6 text-center p-3 border rounded @GetTypeClass(type.Type.Name)">

                    <span class="type-badge text-white text-bold ">@type.Type.Name</span>

                </div>  
            }

        </div>

        @* Se muestran las habilidades del pokemon *@

        @* Labe Habilidades ------------------------------------------------------------ *@
        <div class="row mt-4">
            <div class="col-12 text-start text-secondary">
                <p class="fw-light fst-italic">Habilidades</p>
            </div>
        </div>

        <div class="row mt-2 justify-content-center">

            @foreach (var ability in pokemon.Abilities)
            {
                <div class="col-6 text-center p-3 border rounded">

                    <span class="type-badge">@ability.Ability.Name</span>

                </div>
            }
        </div>

    </div>
}

@code {

    [Parameter]
    public string Name { get; set; } = string.Empty;
    private PokemonCharacteristics? pokemon;
    private string? ImgPokemon;

    //OnParametersSetAsync para detectar cambios en el parámetro
    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(Name))
        {
            pokemon = null;
            return;
        }

        try
        {
            pokemon = await PokeApiService.GetPokemonByNameAsync(Name);

            if (pokemon != null && !string.IsNullOrEmpty(pokemon.Name))
            {
                ImgPokemon = $"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/{pokemon.Id}.png";
            }
            else
            {
                pokemon = null;
            }
        }
        catch
        { 
            Console.WriteLine($"Error al obtener el pokemón");
            pokemon = null;
        }



    }

    // Método para obtener la clase de los tipos
    private string GetTypeClass(string typeName)
    {
        return typeName switch
        {
            "normal" => "bg-normal",
            "fighting" => "bg-fighting",
            "flying" => "bg-flying",
            "poison" => "bg-poison",
            "ground" => "bg-ground",
            "rock" => "bg-rock",
            "bug" => "bg-bug",
            "ghost" => "bg-ghost",
            "steel" => "bg-steel",
            "fire" => "bg-fire",
            "water" => "bg-water",
            "grass" => "bg-grass",
            "electric" => "bg-electric",
            "psychic" => "bg-psychic",
            "ice" => "bg-ice",
            "dragon" => "bg-dragon",
            "dark" => "bg-dark",
            "fairy" => "bg-fairy",
            "stellar" => "bg-stellar",
            "unknown" => "bg-unknown",
            _ => ""
        };
    }

}