@rendermode InteractiveAuto
@* Importamos MudBlazor *@
@using MudBlazor

@* Importamos los modelos y servicios compartidos y inyectamos la interfaz*@
@using PokeApi.Shared.Models

@* Importamos los servicios del cliente *@
@using Services;

@* Verificamos si se encontró algún pokemón*@
@if (pokemon == null)
{
    @* Mostramos el esqueleton en caso de que no se halla seleccionado nada *@
    <MudContainer Class="">
        
        @* Circulo *@
        <MudGrid Justify="Justify.Center">
            <MudItem>

                <MudSkeleton SkeletonType="SkeletonType.Circle" Width="200px" Height="200px"/>

            </MudItem>
        </MudGrid>


        @* Nombre*@
        <MudGrid Justify="Justify.Center" Class="mt-10">

            <MudItem xs="6">

                <MudSkeleton Height="80px"/>

            </MudItem>

        </MudGrid>

        @* labelTipo *@
        <MudCardContent>
            <MudSkeleton Width="10%" Class="ml-2"/>
        </MudCardContent>

        @* Tipo *@
        <MudGrid Justify="Justify.Center">

            <MudSkeleton Width="45%" Height="90px;" Class="ml-4"/>
            <MudSkeleton Width="45%" Height="90px;" class="ml-4"/>

        </MudGrid>


        @* labelHabilidades*@
        <MudCardContent>
            <MudSkeleton Width="10%" Class="ml-2"/>
        </MudCardContent>


        @* Tipo *@
        <MudGrid Justify="Justify.Center">

            <MudSkeleton Width="45%" Height="90px;" Class="ml-4"/>
            <MudSkeleton Width="45%" Height="90px;" class="ml-4"/>

        </MudGrid>

    </MudContainer>
}

// Si se encontro un pokemón, se muestra la información
else
{
    @* Se muestra la imagen del pokemón si existe *@
    <MudGrid class="px-10 pb-10" Justify="Justify.Center" Style="gap: 5px;">

        <MudItem xs="12" md="12" lg="12" class=" d-flex justify-content-center  ">

            @if (!string.IsNullOrEmpty(_ImgPokemon))
            {
                <MudImage Src="@_ImgPokemon" Class="w-50" Alt="@pokemon.Name"/>
            }

        </MudItem>

        @* Se muestra el nombre del pokemón si existe *@

        <MudItem xs="12" md="12" lg="12" class="text-center">


            @if (!string.IsNullOrEmpty(pokemon.Name))
            {
                <MudText Typo="Typo.h6" Class="fw-bold">@pokemon.Name.ToUpper()</MudText>
            }

        </MudItem>

        @* Labe Tipo ----------------------------------------------------------------------------------- *@

        <MudItem xs="12" md="12" lg="12" Class="">

            <MudText Typo="Typo.body1">Tipos</MudText>


        </MudItem>

        @*Mostraos los tipos del Pokemon ---- --  - -*@
        @foreach (var type in pokemon.Types)
        {
            <MudItem xs="12" md="5" lg="5" class=" p-0">

                <div
                    class="d-flex justify-content-center  px-5 py-3 w-full h-full rounded  @GetTypeClass(type.Type.Name)">

                    <MudText Typo="Typo.body1" Class="text-white text-bold">@type.Type.Name.ToUpper()</MudText>

                </div>

            </MudItem>
        }

        @* Se muestran las habilidades del pokemon *@


        @* Labe Tipo ----------------------------------------------------------------------------------- *@

        <MudItem xs="12" md="12" lg="12" Class="">

            <MudText Typo="Typo.body1">Habilidades</MudText>


        </MudItem>



        @foreach (var ability in pokemon.Abilities)
        {
            <MudItem xs="12" md="4" lg="4" class="border  rounded-pill d-flex justify-content-center align-items-center"
                     Style="padding: 0; ">

                <MudText Typo="Typo.body1" Class="">@ability.Ability.Name.ToUpper()</MudText>


            </MudItem>
        }


    </MudGrid>
}


@code {

    // Declaramos una variable para el servicio
    private PokeApiClientService _clientService;

    // Parámetro para recibir el nombre del pokemón
    [Parameter] public string Name { get; set; } = string.Empty;

    // Variable para almacenar las características del pokemón
    private PokemonCharacteristics? pokemon;

    // Variable para almacenar la imagen del pokemón
    private string? _ImgPokemon;


    protected override async Task OnInitializedAsync()
    {
        // Inicializar el cliente con la URL de la API
        _clientService = new PokeApiClientService("https://localhost:7285/");
    }


    //OnParametersSetAsync para detectar cambios en el parámetro
    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(Name))
        {
            pokemon = null;
            return;
        }

        try
        {
            pokemon = await _clientService.GetPokemonByNameAsync(Name);

            if (pokemon != null && !string.IsNullOrEmpty(pokemon.Name))
            {
                _ImgPokemon = $"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/{pokemon.Id}.png";
            }
            else
            {
                pokemon = null;
            }
        }
        catch
        {
            Console.WriteLine($"Error al obtener el pokemón");
            pokemon = null;
        }
    }

    // Método para obtener la clase de los tipos
    private string GetTypeClass(string typeName)
    {
        return typeName switch
        {
            "normal" => "bg-normal",
            "fighting" => "bg-fighting",
            "flying" => "bg-flying",
            "poison" => "bg-poison",
            "ground" => "bg-ground",
            "rock" => "bg-rock",
            "bug" => "bg-bug",
            "ghost" => "bg-ghost",
            "steel" => "bg-steel",
            "fire" => "bg-fire",
            "water" => "bg-water",
            "grass" => "bg-grass",
            "electric" => "bg-electric",
            "psychic" => "bg-psychic",
            "ice" => "bg-ice",
            "dragon" => "bg-dragon",
            "dark" => "bg-dark",
            "fairy" => "bg-fairy",
            "stellar" => "bg-stellar",
            "unknown" => "bg-unknown",
            _ => ""
        };
    }

}
